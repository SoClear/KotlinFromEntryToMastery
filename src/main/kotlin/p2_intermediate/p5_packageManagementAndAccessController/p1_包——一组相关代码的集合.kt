package p2_intermediate.p5_packageManagementAndAccessController

/*
和Java一样，Kotlin也以包的形式对代码源文件进行组织和管理。
一个包可以由多个源文件组成。
一般来说，在同一个包中的源文件要么属于同一个代码层，要么属于同一个业务处理流程。

声明包
[语法]
package 包名
包名可以由任何合法的字母组成。
按照Java的习惯，包名的路径和磁盘上的文件路径需要保持一致(Kotlin并没有强制要求必须一致)。
对于文件路径中的斜杠(“\”或“/”)，在包名中需要用点号“.”进行替换。

包声明语句必须放在所有代码的前面，这表示该语句下的所有顶层函数和类都属于该包。
如果一个源文件没有显式声明包名，则编译器会为这个源文件提供个无名的包作为默认包。

[举例]声明一个包含顶层函数和类的包。具体代码如下:
//声明了一个包
package a.b
//以下为包中的成员
fun test () {}
class A {]
在这个例子中，函数test()和类A都属于包a.b中的一员。 由于包中成员的完整限定名就是“包名加上成员名”，
所以，函数test()的完整限定名为a.b.test(),类A的完整限定名为a.b.A

package p2_intermediate.p5_packageManagementAndAccessController


导入包
1.导入包的作用
默认情况下，如果在当前源文件中需要使用其他包中成员提供的功能，则需要使用该成员的完整限定名。
完整限定名通常非常长，每次手动编写无疑会非常麻烦，也容易出错，而导入包功能则可以解决这个问题。

导入包就是:为其他包的成员建立一个导入名。
这样在当前源文件中就可以使用导入名，而不是使用完整限定名来访问该成员。
导入名需要与要导入的类名或函数名保持致。

2.使用导入功能
要实现导入功能，需要使用import语句。该语句除可以导入其他包的类外，还可以导入顶层函数、顶层常量、单例对象和枚举类。
[举例]导入foo包中的Bar类。具体代码如下:
//导入foo包下的Bar类，其完整限定名为foo.Bar, 导入名为Bar
import foo.Bar
//导入包后可以直接使用导入名创建对象
var bar1 = Bar ()
//没有导入包时只能使用类的完整限定名创建对象
var bar2 = foo.Bar()



3.导入包下的所有成员
如果希望直接导入某个包下的所有成员，则可以使用通配符“*”普换具体的路径。
[举例]导入foo包下的所有成员。具体代码如下:
/1导入了foo包下的所有成员
import foo.*

4.修改导入名
在导入多个包时，如果这些包中存在名称称相同的成员，则编译器就无法推则出开发者实际需要使用的成员。
此时必须使用该成员的完整限定名来进行访问，或者在导人包时为导入名起一个别名。
[举例]为导入名起别名。具体代码如下:
import foo.Bar as Foo




和Java一样，Kotlin 每份源代码文件都会默认导入一些内置的语言包。
使用这些语言包中的代码，不需要显式编写导入语句。这些自动导入的语言包包括:
●kotlin.*
●kotlin. annotation.*
●kotlin.collections.*
●kotlin.comparisons.* (自1.1起)
●kotlin.io.*
●kotlin.ranges.*
●kotlin sequences.*
●kotlin.text.*
在使用不同编译平台的Kotlin时，还会额外导入以下包。
(1) JVM平台，需要导入: java.lang.*和kotlin.jvm.*。
(2) JS平台，需要导入: kotlin.js.*.

 */
