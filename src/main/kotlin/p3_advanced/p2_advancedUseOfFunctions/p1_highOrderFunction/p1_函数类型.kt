package p3_advanced.p2_advancedUseOfFunctions.p1_highOrderFunction

/*
高阶函数（highOrderFunction）是一种以函数作为参数或者返回值的函数，它也被称为复合函数。

函数类型
1.函数类型的概念
在Kotlin中函数属于“特权阶层”，即函数可以像字符串、数值等数据类型一样拥有自己的类型，而这个类型就是函数类型。
函数类型既可以作为函数的形参类型，也可以作为变量的声明类型。

2.定义函数类型
在Kotlin中，接口Function代表的是函数类型。
但是和数据类型不同，函数类型的真实类型并不在类库中（而如String、Int数据类型都存在于类库中），
而是由编译器根据参数列表和返回值类型在编译期生成。使用这种类型也被称为编译器生成类型。
函数类型就是基于Function接口生成的编译器生成类型。

函数类型的声明语法如下：
Function 参数类型 <参数类型列表,返回值类型>

· 如果一个函数只包含一个Int类型的参数，而且返回值也是Int类型，则它的函数类型为Function1<Int,Int>。
· 如果一个函数包含Int类型和String两个参数，而且没有返回值，则它的函数类型为Function<Int,String,Unit>

编译器生成类型可以避免在类库中预先定义好Function1，Function2，...FunctionN这样的类型，有效减少类库的大小。

3.函数类型的语法糖
从上面的例子中可以看到，函数类型的声明语法非常麻烦，所以Kotlin提供了语法糖简化这个过程。简化后的函数类型的声明语法如下：
(参数列表类型) -> 返回值类型
 */
//【举例】将匿名函数赋值给函数类型变量
var inc1: (Int) -> Int =fun (x:Int):Int{
    return x+1
}
/*
在这个例子中，由于匿名函数的参数和返回值都是Int类型，所以变量inc1的类型为 函数类型“(Int) -> Int”


4.调用函数类型变量
函数类型变量可以和普通函数一样进行调用操作。
 */
//【举例】通过函数类型变量调用函数
//输出：11
//println(inc1(10))
/*
5.将函数声明赋值给函数类型变量
除函数表达式外，函数声明也可以赋值给函数类型变量，
但是此时需要先使用反射API来获得函数的引用
 */
//【举例】将函数声明赋值给函数类型变量
fun inc2(x:Int):Int{
    return x+1
}
fun main() {
    // ::为反射API中的操作符
    val incRef: (Int) -> Int = ::inc2
    //输出：4
    println(incRef(4))
}

